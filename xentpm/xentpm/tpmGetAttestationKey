#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import urllib2
import base64
from xml.dom.minidom import parse

path 	= "/opt/tpm/"
tpmcert     = path + "tpm.cert"
selfcert    = path + "xentpm.cert"
xmlfile     = path + "xenaik.xml"
aikblob     = path + "aik_tcpa.pub"
pubkey      = path + "xen.pub"
aikpub      = path + "aik_pem.pub"

tempxml = "/tmp/out.xml"
error_strings =  { tpmcert:   'Error in Reading TPM certificate',\
                  'unknown': 'Error happend in AIK request ',\
                   xmlfile:  'Error in XML Schema file',\
                   aikblob:  'Error in Reading AIK TCPA Pub Key',\
                   pubkey:   'Error in Reading XenServer Public Key',\
                   aikpub:   'Error in Reading AIK Public Key' }

error   = 'unknown'
##Create an XML with
## certifciate, public keys
def gen_out_xml():
    global error
    try:
        dom = parse(xmlfile)
        root = dom.getElementsByTagName("xentxt:xentxtdata")
        xencert = dom.getElementsByTagName('xentxt:xencert')[0]
        xenpub  = dom.getElementsByTagName("xentxt:xenpubkey")[0]
        blob  = dom.getElementsByTagName("xentxt:aiktcpa")[0]
        aikpubkey  = dom.getElementsByTagName("xentxt:aikpub")[0]
        certtype  = dom.getElementsByTagName("xentxt:certtype")[0]
    except:
        error = xmlfile
	raise 
    self = True
    try:
	f = open (tpmcert)
        xencert.firstChild.nodeValue = base64.b64encode(f.read())
        f.close()
        certtype.firstChild.nodeValue = "False"
        self = False;
    except:
        pass

    if  self == True :
        try:
	    f = open(selfcert)
            xencert.firstChild.nodeValue =  base64.b64encode(f.read())
            certtype.firstChild.nodeValue = "True"
            f.close()
        except:
            error = tpmcert
            raise
    try:
        f = open(pubkey)
        xenpub.firstChild.nodeValue =  base64.b64encode(f.read())
        f.close()
    except:
        error = pubkey
	raise
    try:
        f = open(aikblob)
        blob.firstChild.nodeValue = base64.b64encode(f.read())
        f.close()
    except:
        error = aikblob
	raise
    try:
        f = open(aikpub)
        aikpubkey.firstChild.nodeValue = base64.b64encode(f.read())
        f.close()
    except:
        error = aikpub
   	raise 
    f = open(tempxml,"w");
    f.write(dom.toxml())
    f.close()

def main(session, args):
    try:
        gen_out_xml()
        f = open(tempxml,"r")
        data = f.read()
        return data
    except:
        try:
	    return error_strings[error]
        except:
            return "Error While getting AIK data" 

if __name__ == "__main__":
    XenAPIPlugin.dispatch({"main":main})
    #print main(None,None)
