#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import urllib2
import base64
import subprocess
from xml.dom.minidom import parse

path 	= "/opt/xensource/tpm/"
prg  =  path + "xentpm"
xmlfile     = path + "xenaik.xml"
aiktcpa     = path + "aik_tcpa.pub"
aikpub      = path + "aik_pem.pub"

tempxml = "/tmp/out.xml"

error_strings =  { 'unknown': 'Error happend in AIK request ',\
                   xmlfile:  'Error in XML Schema file',\
                   aiktcpa:  'Error in Reading AIK TCPA Pub Key',\
                   aikpub:   'Error in Reading XenServer Public Key' }

def doexec(args, inputtext=None):
    """Execute a subprocess, then return its return code, stdout and stderr"""
    proc = subprocess.Popen(args,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,close_fds=True)
    (stdout,stderr) = proc.communicate(inputtext)
    rc = proc.returncode
    return (rc,stdout,stderr)

def get_endorsementkey():
    (rc,stdout,stderr) = doexec([prg, "--get_ekey"])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the endorsement key")
    return stdout

def get_tpmcert():
    (rc,stdout,stderr) = doexec([prg, "--get_ekcert"])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the TPM certificate")
    return stdout

error   = 'unknown'
##Create an XML with
## certifciate, public keys
def gen_out_xml():
    global error
    try:
        dom = parse(xmlfile)
        root = dom.getElementsByTagName("xentxt:xentxtdata")
        tpmcert_node = dom.getElementsByTagName('xentxt:TPM_Endorsement_Certficate')[0]
        ekpub_node  = dom.getElementsByTagName("xentxt:TPM_Endorsement_KEY_PEM")[0]
        aikpub_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_PEM")[0]
        aiktcp_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_TCPA")[0]
    except:
        error = xmlfile
	raise
    try:
        tpmcert_node.firstChild.nodeValue = get_tpmcert()
    except:
        tpmcert_node.firstChild.nodeValue = ''
    ekpub_node.firstChild.nodeValue = get_endorsementkey()
    try:
        f = open(aiktcpa)
        aiktcp_node.firstChild.nodeValue = base64.b64encode(f.read())
        f.close()
    except:
        error = aiktcpa
	raise
    try:
        f = open(aikpub)
        aikpub_node.firstChild.nodeValue = base64.b64encode(f.read())
        f.close()
    except:
        error = aikpub
   	raise
    f = open(tempxml,"w");
    f.write(dom.toxml())
    f.close()

def main(session, args):
    try:
        gen_out_xml()
        f = open(tempxml,"r")
        data = f.read()
        return data
    except:
        try:
	    return error_strings[error]
        except:
            return "Error While getting AIK data"

if __name__ == "__main__":
    XenAPIPlugin.dispatch({"main":main})
    #print main(None,None)
