#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import urllib2
import base64
import subprocess
import os.path
from xml.dom.minidom import parse

path 	= "/opt/xensource/tpm/"
prg  =  path + "xentpm"
xmlfile     = path + "xenaik.xml"
aikblob     = path + "aiktpmblob"
tempxml = "/tmp/out.xml"

def doexec(args, inputtext=None):
    """Execute a subprocess, then return its return code, stdout and stderr"""
    proc = subprocess.Popen(args,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,close_fds=True)
    (stdout,stderr) = proc.communicate(inputtext)
    rc = proc.returncode
    return (rc,stdout,stderr)

def get_endorsementkey():
    (rc,stdout,stderr) = doexec([prg, "--get_ekey"])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the endorsement key")
    return stdout

def get_tpmcert():
    (rc,stdout,stderr) = doexec([prg, "--get_ekcert"])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the TPM certificate")
    return stdout

def get_aik_pem():
    (rc,stdout,stderr) = doexec([prg, "--get_aik_pem", aikblob])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the AIK PEM")
    return stdout

def get_aik_tcpa():
    (rc,stdout,stderr) = doexec([prg, "--get_aik_tcpa", aikblob])
    if rc != 0:
        raise Exception("Error: " + rc + "getting the AIK TCPA Pub Key")
    return stdout

def gen_aik():
    (rc,stdout,stderr) = doexec([prg, "--gen_aik", aikblob])
    if rc != 0:
        raise Exception("Error: " + rc + "generation AIK")
    return stdout

##Create an XML with
## certifciate, public keys
def gen_out_xml():
    dom = parse(xmlfile)
    root = dom.getElementsByTagName("xentxt:xentxtdata")
    tpmcert_node = dom.getElementsByTagName('xentxt:TPM_Endorsement_Certficate')[0]
    ekpub_node  = dom.getElementsByTagName("xentxt:TPM_Endorsement_KEY_PEM")[0]
    aikpub_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_PEM")[0]
    aiktcp_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_TCPA")[0]
    try:
        tpmcert_node.firstChild.nodeValue = get_tpmcert()
    except:
        tpmcert_node.firstChild.nodeValue = ''
    ekpub_node.firstChild.nodeValue = get_endorsementkey()
    if not os.path.isfile(aikblob) :
        gen_aik()
    aiktcp_node.firstChild.nodeValue = get_aik_tcpa()
    aikpub_node.firstChild.nodeValue = get_aik_pem()
    f = open(tempxml,"w");
    f.write(dom.toxml())
    f.close()

def main(session, args):
    gen_out_xml()
    f = open(tempxml,"r")
    data = f.read()
    return data

if __name__ == "__main__":
    XenAPIPlugin.dispatch({"main":main})
    #print main(None,None)
