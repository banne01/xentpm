#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import urllib2
import base64
import subprocess
import os.path
from xml.dom.minidom import parseString
path          = "/opt/xensource/tpm/"
prg           = path + "xentpm"

xml_schema     = '<?xml version="1.0" encoding="UTF-8"?> \
<xentxt:xentxtdata xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xentxt="http://www.XenTxt.org/XenTxtGetAIK" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.XenTxt.org/XenTxtGetAIK xentxt.xsd "> \
  <xentxt:TPM_Endorsement_Certficate>MA==</xentxt:TPM_Endorsement_Certficate> \
  <xentxt:TPM_Endorsement_KEY_PEM>MA==</xentxt:TPM_Endorsement_KEY_PEM> \
  <xentxt:TPM_Attestation_KEY_PEM>MA==</xentxt:TPM_Attestation_KEY_PEM> \
   <xentxt:TPM_Attestation_KEY_TCPA>MA==</xentxt:TPM_Attestation_KEY_TCPA> \
</xentxt:xentxtdata>'

# error codes

XENTPM_E_INTERNAL      =     -3
XENTPM_E_CERT          =     -4
XENTPM_E_CERT_PARSE    =     -5
XENTPM_E_CONFIG_KEY    =     -6
XENTPM_E_CONFIG_FILE   =     -7
TPM_E_AUTHFAIL         =      1
TPM_E_DEACTIVATED      =      6
TPM_E_DISABLED         =      7

def process_error(rc):
    if rc == TPM_E_AUTHFAIL:
        raise Exception("Error: XenServer does not own the TPM. Please clear the TPM in the BIOS")
    elif rc == TPM_E_DISABLED:
        raise Exception("Error: There is no TPM on this machine or it is not enabled in the BIOS")
    elif rc == TPM_E_DISABLED:
        raise Exception("Error: The TPM is deactivated.  Please activate the TPM in the BIOS.")
    elif rc == XENTPM_E_INTERNAL:
        raise Exception("Error: XenServer encountered a problem with TPM on this machine")
    elif rc == XENTPM_E_CERT:
        raise Exception("Error: XenServer could not read TPM certificate")
    elif rc == XENTPM_E_CERT_PARSE:
        raise Exception("Error: XenServer could not parse TPM certificate")
    elif rc == XENTPM_E_CONFIG_KEY:
        raise Exception("Error: XenServer could not read config key from config file")
    elif rc == XENTPM_E_CONFIG_FILE:
        raise Exception("Error: XenServer could not read configuration file")
    else:
        raise Exception("Error: XenServer encountered a problem with the TPM on this machine")

def doexec(args, inputtext=None):
    """Execute a subprocess, then return its return code, stdout and stderr"""
    proc = subprocess.Popen(args,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,close_fds=True)
    (stdout,stderr) = proc.communicate(inputtext)
    rc = proc.returncode
    if rc != 0:
        process_error(stderr)
    return (stdout)

def call_get_endorsementkey():
    return doexec([prg, "--get_ekey"])

def call_get_tpmcert():
    return doexec([prg, "--get_ekcert"])

def call_get_aik_pem():
    return  doexec([prg, "--get_aik_pem"])

def call_get_aik_tcpa():
    return doexec([prg, "--get_aik_tcpa"])

def call_gen_aik(session):
    xencert = ""
    try:
        host_ref = session.xenapi.session.get_this_host(session.handle)
        xencert  = session.xenapi.host.get_server_certificate(host_ref)
    except:
        #TODO :raise error ?
        xencert = ""
    return doexec([prg, "--gen_aik", base64.b64encode(xencert)])

def call_tpm_challenge(challenge):
    return doexec([prg, "--tpm_challenge", challenge])

def call_tpm_quote(nonce):
    return doexec([prg, "--tpm_quote", nonce])

##Create an XML with
## certifciate, public keys

def tpm_get_attestation_identity(session, args):
    dom = parseString(xml_schema)
    root = dom.getElementsByTagName("xentxt:xentxtdata")
    tpmcert_node = dom.getElementsByTagName('xentxt:TPM_Endorsement_Certficate')[0]
    ekpub_node  = dom.getElementsByTagName("xentxt:TPM_Endorsement_KEY_PEM")[0]
    aikpub_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_PEM")[0]
    aiktcp_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_TCPA")[0]
    try:
        tpmcert_node.firstChild.nodeValue = call_get_tpmcert()
    except:
        tpmcert_node.firstChild.nodeValue = ''
    ekpub_node.firstChild.nodeValue = call_get_endorsementkey()
    call_gen_aik(session)
    aiktcp_node.firstChild.nodeValue = call_get_aik_tcpa()
    aikpub_node.firstChild.nodeValue = call_get_aik_pem()
    return dom.toxml()

def tpm_challenge(session, args):
    challenge = args['challenge']
    rc = call_tpm_challenge(challenge)
    return rc

def tpm_get_quote(session, args):
    nonce =  args['nonce']
    rc = call_tpm_quote(nonce)
    return rc

if __name__ == "__main__":
    XenAPIPlugin.dispatch({"tpm_get_attestation_identity": tpm_get_attestation_identity,
                           "tpm_challenge": tpm_challenge,
                           "tpm_get_quote": tpm_get_quote,
                           })
