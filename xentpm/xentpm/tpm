#!/usr/bin/env python

import XenAPI
import XenAPIPlugin
import sys
import urllib2
import base64
import subprocess
import os.path
from xml.dom.minidom import parse

path          = "/opt/xensource/tpm/"
prg           = path + "xentpm"
xmlfile       = path + "xenaik.xml"
aikblob       = path + "aiktpmblob"
tempxml       = "/tmp/out.xml"
challengefile = path + "challenge"
responsefile  = path + "response"
noncefile     = path + "nonce"
quotefile     = path + "outquote"

def doexec(args, inputtext=None):
    """Execute a subprocess, then return its return code, stdout and stderr"""
    proc = subprocess.Popen(args,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,close_fds=True)
    (stdout,stderr) = proc.communicate(inputtext)
    rc = proc.returncode
    return (rc,stdout,stderr)

def call_get_endorsementkey():
    (rc,stdout,stderr) = doexec([prg, "--get_ekey"])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " getting the endorsement key")
    return stdout

def call_get_tpmcert():
    (rc,stdout,stderr) = doexec([prg, "--get_ekcert"])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " getting the TPM certificate")
    return stdout

def call_get_aik_pem():
    (rc,stdout,stderr) = doexec([prg, "--get_aik_pem", aikblob])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " getting the AIK PEM")
    return stdout

def call_get_aik_tcpa():
    (rc,stdout,stderr) = doexec([prg, "--get_aik_tcpa", aikblob])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " getting the AIK TCPA Pub Key")
    return stdout

def call_gen_aik():
    (rc,stdout,stderr) = doexec([prg, "--gen_aik", aikblob])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " generation AIK")
    return stdout

def call_tpm_challenge():
    (rc,stdout,stderr) = doexec([prg, "--tpm_challenge", aikblob, challengefile, responsefile])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " TPM challenge")
    return stdout

def call_tpm_quote():
    (rc,stdout,stderr) = doexec([prg, "--tpm_quote", noncefile, aikblob, quotefile])
    if rc != 0:
        raise Exception("Error: " + str(rc) + " getting TPM quote")
    return stdout

##Create an XML with
## certifciate, public keys
def gen_out_xml():
    dom = parse(xmlfile)
    root = dom.getElementsByTagName("xentxt:xentxtdata")
    tpmcert_node = dom.getElementsByTagName('xentxt:TPM_Endorsement_Certficate')[0]
    ekpub_node  = dom.getElementsByTagName("xentxt:TPM_Endorsement_KEY_PEM")[0]
    aikpub_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_PEM")[0]
    aiktcp_node  = dom.getElementsByTagName("xentxt:TPM_Attestation_KEY_TCPA")[0]
    try:
        tpmcert_node.firstChild.nodeValue = call_get_tpmcert()
    except:
        tpmcert_node.firstChild.nodeValue = ''
    ekpub_node.firstChild.nodeValue = call_get_endorsementkey()
    if not os.path.isfile(aikblob) :
        call_gen_aik()
    aiktcp_node.firstChild.nodeValue = call_get_aik_tcpa()
    aikpub_node.firstChild.nodeValue = call_get_aik_pem()
    f = open(tempxml,"w");
    f.write(dom.toxml())
    f.close()

def tpm_get_attestation_identity(session, args):
    gen_out_xml()
    f = open(tempxml,"r")
    data = f.read()
    return data

def tpm_challenge(session, args):
    challenge = args['challenge']
    f = open(challengefile,"w")
    f.write(base64.b64decode(challenge))
    f.close()
    call_tpm_challenge()
    f = open(responsefile,"r")
    rc = f.read()
    f.close()
    return rc

def tpm_get_quote(session, args):
    bnonce =  args['nonce']
    nonce  = base64.b64decode(bnonce)
    f = open(noncefile,"w")
    f.write(nonce)
    f.close()
    call_tpm_quote()
    f = open(quotefile,"r")
    rc = base64.b64encode(f.read())
    f.close()
    return rc

if __name__ == "__main__":
    XenAPIPlugin.dispatch({"tpm_get_attestation_identity": tpm_get_attestation_identity,
                           "tpm_challenge": tpm_challenge,
                           "tpm_get_quote": tpm_get_quote,
                           })
